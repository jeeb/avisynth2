;********************************************************************************
;* Copyright (C) 2005-2007 by Prakash Punnoor                                   *
;* prakash@punnoor.de                                                           *
;*                                                                              *
;* This library is free software; you can redistribute it and/or                *
;* modify it under the terms of the GNU Lesser General Public                   *
;* License as published by the Free Software Foundation; either                 *
;* version 2 of the License                                                     *
;*                                                                              *
;* This library is distributed in the hope that it will be useful,              *
;* but WITHOUT ANY WARRANTY; without even the implied warranty of               *
;* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU            *
;* Lesser General Public License for more details.                              *
;*                                                                              *
;* You should have received a copy of the GNU Lesser General Public             *
;* License along with this library; if not, write to the Free Software          *
;* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA *
;********************************************************************************

; int cpu_caps_detect_x86(uint* caps1, uint* caps2, uint* caps3);
; gcc linux amd64 calling convention: rdi, rsi, rdx
; derived from loki_cpuinfo.c, 1997-98 by H. Dietz and R. Fisher
; using infos from sandpile.org

; returns 0 if no CPUID available

%ifdef HAVE_NASM_VISIBILITY
global _cpu_caps_detect_x86:function hidden
global cpu_caps_detect_x86:function hidden
%else
global _cpu_caps_detect_x86
global cpu_caps_detect_x86
%endif

_cpu_caps_detect_x86:
cpu_caps_detect_x86:

;save &caps3
mov r8, rdx

pushf
pop rax
mov ecx, eax

xor eax, 0x200000
push rax
popf

pushf
pop rax

xor ecx, eax
xor eax, eax
test ecx, 0x200000
jz .Return

push rbx
; standard CPUID
mov eax, 1
cpuid
mov [rdi], edx	;caps1 - MMX, SSE, SSE2
mov [rsi], ecx	;caps2 - SSE3

; extended CPUID
mov	eax, 0x80000001
cpuid
mov [r8], edx	;caps3 - 3DNOW!, 3DNOW!EXT, CYRIX-MMXEXT, AMD-MMX-SSE

pop rbx


; End
.Return
ret

; prevent executable stack
%ifidn __YASM_OBJFMT__,elf
section ".note.GNU-stack" noalloc noexec nowrite progbits
%endif

%ifidn __YASM_OBJFMT__,elf32
section ".note.GNU-stack" noalloc noexec nowrite progbits
%endif

%ifidn __YASM_OBJFMT__,elf64
section ".note.GNU-stack" noalloc noexec nowrite progbits
%endif
