// original IT0051 by thejam79
// add YV12 mode by minamina 2003/05/01
//
// Borrowed from the author of IT.dll, whose name I
// could not determine. Modified for YV12 by Donald Graft.
// RGB32 Added by Klaus Post
// Converted to generic planar, and now using exact coordinates - NOT character coordinates by Klaus Post
// Refactor, DrawString...() is the primative, Oct 2010 Ian Brabham
// TO DO: Clean up - and move functions to a .c file.

const unsigned short font[][20] = {
	//STARTCHAR space
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR !
	{
		0x0000,0x0000,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0000,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR "
	{
		0x0000,0x0000,0x3300,0x3300,
		0x3300,0x1200,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR #
	{
		0x0000,0x0000,0x0000,0x0d80,
		0x0d80,0x0d80,0x3fc0,0x1b00,
		0x1b00,0x1b00,0x7f80,0x3600,
		0x3600,0x3600,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR $
	{
		0x0000,0x0000,0x0c00,0x3f00,
		0x6d80,0x6c00,0x6c00,0x6c00,
		0x3f00,0x0d80,0x0d80,0x0d80,
		0x6d80,0x3f00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR %
	{
		0x0000,0x0000,0x0000,0x3980,
		0x6d80,0x6f00,0x3b00,0x0600,
		0x0600,0x0c00,0x0c00,0x1b80,
		0x1ec0,0x36c0,0x3380,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR &
	{
		0x0000,0x0000,0x1c00,0x3600,
		0x3600,0x3600,0x3c00,0x1800,
		0x3800,0x6c00,0x66c0,0x6380,
		0x6300,0x7780,0x3cc0,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR '
	{
		0x0000,0x0000,0x0f00,0x0e00,
		0x1800,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR (
	{
		0x0000,0x0000,0x0300,0x0600,
		0x0c00,0x0c00,0x1800,0x1800,
		0x1800,0x1800,0x1800,0x0c00,
		0x0c00,0x0600,0x0300,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR )
	{
		0x0000,0x0000,0x3000,0x1800,
		0x0c00,0x0c00,0x0600,0x0600,
		0x0600,0x0600,0x0600,0x0c00,
		0x0c00,0x1800,0x3000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR *
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x3300,0x3300,0x1e00,
		0x7f80,0x1e00,0x3300,0x3300,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR +
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0c00,0x0c00,0x0c00,
		0x7f80,0x0c00,0x0c00,0x0c00,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ,
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0e00,0x0e00,0x1800,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR -
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x7f80,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR .
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0e00,0x0e00,0x0e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR /
	{
		0x0000,0x0000,0x0000,0x0180,
		0x0180,0x0300,0x0300,0x0600,
		0x0600,0x0c00,0x0c00,0x1800,
		0x1800,0x3000,0x3000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR 0
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x3300,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x3300,
		0x3300,0x1e00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR 1
	{
		0x0000,0x0000,0x0c00,0x1c00,
		0x3c00,0x6c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR 2
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x0180,0x0180,
		0x0300,0x0e00,0x1800,0x3000,
		0x6000,0x6000,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR 3
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x0180,0x0300,
		0x0e00,0x0300,0x0180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR 4
	{
		0x0000,0x0000,0x0100,0x0300,
		0x0700,0x0f00,0x1b00,0x3300,
		0x6300,0x6300,0x7f80,0x0300,
		0x0300,0x0300,0x0300,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR 5
	{
		0x0000,0x0000,0x7f80,0x6000,
		0x6000,0x6000,0x6000,0x6e00,
		0x7300,0x0180,0x0180,0x0180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR 6
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6100,0x6000,0x6000,0x6e00,
		0x7300,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR 7
	{
		0x0000,0x0000,0x7f80,0x0180,
		0x0180,0x0300,0x0300,0x0600,
		0x0600,0x0c00,0x0c00,0x1800,
		0x1800,0x3000,0x3000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR 8
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x6180,0x3300,
		0x1e00,0x3300,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR 9
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x6180,0x6180,
		0x3380,0x1d80,0x0180,0x0180,
		0x2180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR :
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0e00,0x0e00,0x0000,
		0x0000,0x0000,0x0000,0x0e00,
		0x0e00,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ;
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0e00,0x0e00,0x0000,
		0x0000,0x0000,0x0000,0x0e00,
		0x0e00,0x1c00,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR <
	{
		0x0000,0x0000,0x0100,0x0300,
		0x0600,0x0c00,0x1800,0x3000,
		0x6000,0x3000,0x1800,0x0c00,
		0x0600,0x0300,0x0100,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR =
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x7f80,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR >
	{
		0x0000,0x0000,0x2000,0x3000,
		0x1800,0x0c00,0x0600,0x0300,
		0x0180,0x0300,0x0600,0x0c00,
		0x1800,0x3000,0x2000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ?
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x6180,0x0300,
		0x0600,0x0c00,0x0c00,0x0c00,
		0x0000,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR @
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6780,0x6f80,0x6d80,
		0x6d80,0x6d80,0x6f00,0x6600,
		0x6000,0x3180,0x1f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR A
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x3300,0x6180,0x6180,
		0x6180,0x7f80,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR B
	{
		0x0000,0x0000,0x7c00,0x6600,
		0x6300,0x6300,0x6300,0x6600,
		0x7e00,0x6300,0x6180,0x6180,
		0x6180,0x6300,0x7e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR C
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6000,0x6000,0x6000,
		0x6000,0x6000,0x6000,0x6000,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR D
	{
		0x0000,0x0000,0x7e00,0x6300,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x6300,0x7e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR E
	{
		0x0000,0x0000,0x7f80,0x6000,
		0x6000,0x6000,0x6000,0x6000,
		0x7e00,0x6000,0x6000,0x6000,
		0x6000,0x6000,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR F
	{
		0x0000,0x0000,0x7f80,0x6000,
		0x6000,0x6000,0x6000,0x6000,
		0x7e00,0x6000,0x6000,0x6000,
		0x6000,0x6000,0x6000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR G
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6000,0x6000,0x6000,
		0x6780,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1e80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR H
	{
		0x0000,0x0000,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x7f80,0x6180,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR I
	{
		0x0000,0x0000,0x7f80,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR J
	{
		0x0000,0x0000,0x0f80,0x0180,
		0x0180,0x0180,0x0180,0x0180,
		0x0180,0x0180,0x0180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR K
	{
		0x0000,0x0000,0x6180,0x6180,
		0x6300,0x6300,0x6600,0x6600,
		0x7c00,0x6600,0x6600,0x6300,
		0x6300,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR L
	{
		0x0000,0x0000,0x6000,0x6000,
		0x6000,0x6000,0x6000,0x6000,
		0x6000,0x6000,0x6000,0x6000,
		0x6000,0x6000,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR M
	{
		0x0000,0x0000,0x6180,0x6180,
		0x7380,0x7380,0x7f80,0x6d80,
		0x6d80,0x6d80,0x6d80,0x6180,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR N
	{
		0x0000,0x0000,0x6180,0x7180,
		0x7180,0x7980,0x7980,0x6d80,
		0x6d80,0x6780,0x6780,0x6380,
		0x6380,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR O
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR P
	{
		0x0000,0x0000,0x7e00,0x6300,
		0x6180,0x6180,0x6180,0x6180,
		0x6300,0x7e00,0x6000,0x6000,
		0x6000,0x6000,0x6000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Q
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x6d80,
		0x6780,0x3300,0x1f00,0x0180,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR R
	{
		0x0000,0x0000,0x7e00,0x6300,
		0x6180,0x6180,0x6180,0x6180,
		0x6300,0x7e00,0x6600,0x6300,
		0x6300,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR S
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6000,0x6000,0x3000,
		0x1e00,0x0300,0x0180,0x0180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR T
	{
		0x0000,0x0000,0x7f80,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR U
	{
		0x0000,0x0000,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR V
	{
		0x0000,0x0000,0x6180,0x6180,
		0x6180,0x6180,0x3300,0x3300,
		0x3300,0x1e00,0x1e00,0x1e00,
		0x0c00,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR W
	{
		0x0000,0x0000,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x6d80,
		0x6d80,0x6d80,0x6d80,0x7380,
		0x7380,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR X
	{
		0x0000,0x0000,0x6180,0x6180,
		0x3300,0x3300,0x1e00,0x1e00,
		0x0c00,0x1e00,0x1e00,0x3300,
		0x3300,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Y
	{
		0x0000,0x0000,0x6180,0x6180,
		0x3300,0x3300,0x1e00,0x1e00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Z
	{
		0x0000,0x0000,0x7f80,0x0180,
		0x0180,0x0300,0x0600,0x0600,
		0x0c00,0x1800,0x1800,0x3000,
		0x6000,0x6000,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR [
	{
		0x0000,0x0000,0x3f00,0x3000,
		0x3000,0x3000,0x3000,0x3000,
		0x3000,0x3000,0x3000,0x3000,
		0x3000,0x3000,0x3f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR \ 
	{
		0x0000,0x0000,0x0000,0x3000,
		0x3000,0x1800,0x1800,0x0c00,
		0x0c00,0x0600,0x0600,0x0300,
		0x0300,0x0180,0x0180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ]
	{
		0x0000,0x0000,0x3f00,0x0300,
		0x0300,0x0300,0x0300,0x0300,
		0x0300,0x0300,0x0300,0x0300,
		0x0300,0x0300,0x3f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ^
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x6180,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR _
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x7fc0,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR `
	{
		0x0000,0x0000,0x3c00,0x1c00,
		0x0600,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR a
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x1f00,
		0x3180,0x0180,0x3f80,0x6180,
		0x6180,0x6180,0x3e80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR b
	{
		0x0000,0x0000,0x6000,0x6000,
		0x6000,0x6000,0x6000,0x6e00,
		0x7300,0x6180,0x6180,0x6180,
		0x6180,0x7300,0x6e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR c
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x1f00,
		0x3180,0x6000,0x6000,0x6000,
		0x6000,0x3180,0x1f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR d
	{
		0x0000,0x0000,0x0180,0x0180,
		0x0180,0x0180,0x0180,0x1d80,
		0x3380,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1d80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR e
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x1e00,
		0x3300,0x6180,0x7f80,0x6000,
		0x6000,0x3180,0x1f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR f
	{
		0x0000,0x0000,0x0f00,0x1980,
		0x1980,0x1800,0x1800,0x1800,
		0x1800,0x7e00,0x1800,0x1800,
		0x1800,0x1800,0x1800,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR g
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x3e80,
		0x6380,0x6300,0x6300,0x6300,
		0x3e00,0x6000,0x3f00,0x6180,
		0x6180,0x6180,0x3f00,0x0000,
	},
	//STARTCHAR h
	{
		0x0000,0x0000,0x6000,0x6000,
		0x6000,0x6000,0x6000,0x6e00,
		0x7300,0x6180,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR i
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0c00,0x0c00,0x0000,0x3c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR j
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0180,0x0180,0x0000,0x0780,
		0x0180,0x0180,0x0180,0x0180,
		0x0180,0x0180,0x0180,0x3180,
		0x3180,0x3180,0x1f00,0x0000,
	},
	//STARTCHAR k
	{
		0x0000,0x0000,0x6000,0x6000,
		0x6000,0x6000,0x6000,0x6300,
		0x6600,0x6c00,0x7800,0x7c00,
		0x6600,0x6300,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR l
	{
		0x0000,0x0000,0x3c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR m
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x5b00,
		0x7f80,0x6d80,0x6d80,0x6d80,
		0x6d80,0x6d80,0x6d80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR n
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x6e00,
		0x7300,0x6180,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR o
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x1e00,
		0x3300,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR p
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x6e00,
		0x7300,0x6180,0x6180,0x6180,
		0x6180,0x7300,0x6e00,0x6000,
		0x6000,0x6000,0x6000,0x0000,
	},
	//STARTCHAR q
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x1d80,
		0x3380,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1d80,0x0180,
		0x0180,0x0180,0x0180,0x0000,
	},
	//STARTCHAR r
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x6f00,
		0x3980,0x3000,0x3000,0x3000,
		0x3000,0x3000,0x3000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR s
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x3f00,
		0x6180,0x6000,0x3f00,0x0180,
		0x0180,0x6180,0x3f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR t
	{
		0x0000,0x0000,0x0000,0x0000,
		0x1800,0x1800,0x1800,0x7e00,
		0x1800,0x1800,0x1800,0x1800,
		0x1800,0x1980,0x0f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR u
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1d80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR v
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x6180,
		0x6180,0x3300,0x3300,0x1e00,
		0x1e00,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR w
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x6180,
		0x6180,0x6180,0x6d80,0x6d80,
		0x6d80,0x7f80,0x3300,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR x
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x6180,
		0x3300,0x1e00,0x0c00,0x0c00,
		0x1e00,0x3300,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR y
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1d80,0x0180,
		0x6180,0x3300,0x1e00,0x0000,
	},
	//STARTCHAR z
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x3f80,
		0x0180,0x0300,0x0600,0x0c00,
		0x1800,0x3000,0x3f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR {
	{
		0x0000,0x0000,0x0780,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x7800,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0780,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR bar
	{
		0x0000,0x0000,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR }
	{
		0x0000,0x0000,0x7800,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0780,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x7800,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ~
	{
		0x0000,0x0000,0x3980,0x6d80,
		0x6700,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR C177
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR C240
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR exclamdown
	{
		0x0000,0x0000,0x0c00,0x0c00,
		0x0000,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR cent
	{
		0x0000,0x0000,0x0000,0x0c00,
		0x0c00,0x1e00,0x3300,0x6100,
		0x6000,0x6000,0x6100,0x3300,
		0x1e00,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR sterling
	{
		0x0000,0x0000,0x0000,0x0f00,
		0x1980,0x1980,0x1800,0x1800,
		0x7e00,0x1800,0x1800,0x1800,
		0x7c00,0x56c0,0x7380,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR currency
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x4040,0x2e80,0x1f00,
		0x3180,0x3180,0x3180,0x1f00,
		0x2e80,0x4040,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR yen
	{
		0x0000,0x0000,0x0000,0x0000,
		0x4080,0x6180,0x3300,0x1e00,
		0x3f00,0x0c00,0x3f00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR brokenbar
	{
		0x0000,0x0000,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR section
	{
		0x0000,0x0000,0x3e00,0x6300,
		0x6000,0x7000,0x7800,0x4c00,
		0x6600,0x3300,0x1900,0x0f00,
		0x0300,0x6300,0x3e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR dieresis
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR copyright
	{
		0x0000,0x0000,0x0000,0x0000,
		0x1e00,0x3300,0x6180,0x5e80,
		0x5280,0x5080,0x5280,0x5e80,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ordfeminine
	{
		0x0000,0x0000,0x1f00,0x2180,
		0x0180,0x3f80,0x6180,0x6180,
		0x3e80,0x0000,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR guillmotleft
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0480,0x0d80,0x1b00,0x3600,
		0x6c00,0xd800,0x6c00,0x3600,
		0x1b00,0x0d80,0x0480,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR logicalnot
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x7f80,
		0x7f80,0x0180,0x0180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR hyphen
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x3f00,
		0x3f00,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR registered
	{
		0x0000,0x0000,0x0000,0x0000,
		0x1e00,0x3300,0x6180,0x5e80,
		0x5280,0x5e80,0x5480,0x5680,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR macron
	{
		0x0000,0x0000,0x0000,0x7f00,
		0x7f00,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR degree
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x3300,0x1e00,0x0c00,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR plusminus
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0c00,0x0c00,0x7f80,0x7f80,
		0x0c00,0x0c00,0x0000,0x7f80,
		0x7f80,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR twosuperior
	{
		0x0000,0x0000,0x1c00,0x3600,
		0x0600,0x0c00,0x1800,0x3000,
		0x3e00,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR threesuperior
	{
		0x0000,0x0000,0x1c00,0x3600,
		0x0200,0x0e00,0x0200,0x3600,
		0x1c00,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR acute
	{
		0x0000,0x0000,0x0600,0x0c00,
		0x1800,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR mu
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x6300,0x6300,0x6300,0x6300,
		0x6300,0x7700,0x7d00,0x6000,
		0x6000,0x6000,0x0000,0x0000,
	},
	//STARTCHAR paragraph
	{
		0x0000,0x0000,0x1f80,0x3f80,
		0x7d80,0x7d80,0x7d80,0x3d80,
		0x1d80,0x0580,0x0580,0x0580,
		0x0580,0x0580,0x0580,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR periodcentered
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0e00,
		0x0e00,0x0e00,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR cedilla
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0c00,
		0x0400,0x1200,0x0c00,0x0000,
	},
	//STARTCHAR onesuperior
	{
		0x0000,0x0000,0x1800,0x3800,
		0x1800,0x1800,0x1800,0x3c00,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ordmasculine
	{
		0x0000,0x0000,0x1c00,0x3600,
		0x6300,0x6300,0x6300,0x3600,
		0x1c00,0x0000,0x7f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR guillemotright
	{
		0x0000,0x0000,0x0000,0x0000,
		0x4800,0x6c00,0x3600,0x1b00,
		0x0d80,0x06c0,0x0d80,0x1b00,
		0x3600,0x6c00,0x4800,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR onequarter
	{
		0x0000,0x0000,0x2000,0x6000,
		0x2080,0x2100,0x7200,0x0400,
		0x0900,0x1300,0x2500,0x4f00,
		0x0100,0x0100,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR onehalf
	{
		0x0000,0x0000,0x2000,0x6000,
		0x2080,0x2100,0x7200,0x0400,
		0x0b00,0x1480,0x2080,0x4100,
		0x0200,0x0780,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR threequarters
	{
		0x0000,0x0000,0x7000,0x0800,
		0x3080,0x0900,0x7200,0x0400,
		0x0900,0x1300,0x2500,0x4f80,
		0x0100,0x0100,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR questiondown
	{
		0x0000,0x0000,0x0c00,0x0c00,
		0x0000,0x0c00,0x0c00,0x0c00,
		0x1800,0x3000,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Agrave
	{
		0x0000,0x0000,0x3000,0x1800,
		0x0c00,0x0000,0x0c00,0x1e00,
		0x3300,0x6180,0x6180,0x7f80,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Aacute
	{
		0x0000,0x0000,0x0300,0x0600,
		0x0c00,0x0000,0x0c00,0x1e00,
		0x3300,0x6180,0x6180,0x7f80,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Acircumflex
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x0000,0x0c00,0x1e00,
		0x3300,0x6180,0x6180,0x7f80,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Atilde
	{
		0x0000,0x0000,0x1900,0x3f00,
		0x2600,0x0000,0x0c00,0x1e00,
		0x3300,0x6180,0x6180,0x7f80,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Adieresis
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x6180,0x6180,0x7f80,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Aring
	{
		0x0000,0x0000,0x0c00,0x1200,
		0x1200,0x0c00,0x0c00,0x1e00,
		0x3300,0x6180,0x6180,0x7f80,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR AE
	{
		0x0000,0x0000,0x0f80,0x1e00,
		0x3600,0x3600,0x6600,0x6600,
		0x7f80,0x6600,0x6600,0x6600,
		0x6600,0x6600,0x6780,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Ccedilla
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6000,0x6000,0x6000,
		0x6000,0x6000,0x6000,0x6000,
		0x6180,0x3300,0x1e00,0x0c00,
		0x0400,0x1200,0x0c00,0x0000,
	},
	//STARTCHAR Egrave
	{
		0x0000,0x0000,0x3000,0x1800,
		0x0c00,0x0000,0x7f80,0x6000,
		0x6000,0x6000,0x7e00,0x6000,
		0x6000,0x6000,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Eacute
	{
		0x0000,0x0000,0x0600,0x0c00,
		0x1800,0x0000,0x7f80,0x6000,
		0x6000,0x6000,0x7e00,0x6000,
		0x6000,0x6000,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Ecircumflex
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x0000,0x7f80,0x6000,
		0x6000,0x6000,0x7e00,0x6000,
		0x6000,0x6000,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Edieresis
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x7f80,0x6000,
		0x6000,0x6000,0x7e00,0x6000,
		0x6000,0x6000,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Igrave
	{
		0x0000,0x0000,0x3000,0x1800,
		0x0c00,0x0000,0x3f00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x3f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Iacute
	{
		0x0000,0x0000,0x0600,0x0c00,
		0x1800,0x0000,0x3f00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x3f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Icircumflex
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x0000,0x3f00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x3f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Idieresis
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x3f00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x3f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Eth
	{
		0x0000,0x0000,0x7e00,0x6300,
		0x6180,0x6180,0x6180,0x6180,
		0xf980,0x6180,0x6180,0x6180,
		0x6180,0x6300,0x7e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Ntilde
	{
		0x0000,0x0000,0x1900,0x3f00,
		0x2600,0x0000,0x4180,0x6180,
		0x7180,0x7980,0x7d80,0x6f80,
		0x6780,0x6380,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Ograve
	{
		0x0000,0x0000,0x3000,0x1800,
		0x0c00,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Oacute
	{
		0x0000,0x0000,0x0300,0x0600,
		0x0c00,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Ocircumflex
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Otilde
	{
		0x0000,0x0000,0x1900,0x3f00,
		0x2600,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Odieresis
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR multiply
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x2080,
		0x3180,0x1b00,0x0e00,0x0e00,
		0x1b00,0x3180,0x2080,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Oslash
	{
		0x0000,0x0080,0x1f00,0x3300,
		0x6380,0x6380,0x6580,0x6580,
		0x6580,0x6980,0x6980,0x6980,
		0x7180,0x3300,0x3e00,0x4000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Ugrave
	{
		0x0000,0x0000,0x3000,0x1800,
		0x0c00,0x0000,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Uacute
	{
		0x0000,0x0000,0x0300,0x0600,
		0x0c00,0x0000,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Ucircumflex
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x0000,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Udieresis
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Yacute
	{
		0x0000,0x0000,0x0300,0x0600,
		0x0c00,0x0000,0x4080,0x6180,
		0x3300,0x1e00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Thorn
	{
		0x0000,0x0000,0x0000,0x0000,
		0x3c00,0x1800,0x1f00,0x1980,
		0x1980,0x1980,0x1f00,0x1800,
		0x1800,0x1800,0x3c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR germandbls
	{
		0x0000,0x0000,0x0000,0x1c00,
		0x3e00,0x7300,0x6300,0x6300,
		0x6600,0x6c00,0x6600,0x6300,
		0x6100,0x6300,0x6e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR agave
	{
		0x0000,0x0000,0x3000,0x1800,
		0x0c00,0x0000,0x0000,0x3f00,
		0x6180,0x0180,0x3f80,0x6180,
		0x6180,0x6180,0x3e80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR aacute
	{
		0x0000,0x0000,0x0600,0x0c00,
		0x1800,0x0000,0x0000,0x3f00,
		0x6180,0x0180,0x3f80,0x6180,
		0x6180,0x6180,0x3e80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR acircumflex
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x0000,0x0000,0x3f00,
		0x6180,0x0180,0x3f80,0x6180,
		0x6180,0x6180,0x3e80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR atilde
	{
		0x0000,0x0000,0x1900,0x3f00,
		0x2600,0x0000,0x0000,0x3f00,
		0x6180,0x0180,0x3f80,0x6180,
		0x6180,0x6180,0x3e80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR adieresis
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x0000,0x3f00,
		0x6180,0x0180,0x3f80,0x6180,
		0x6180,0x6180,0x3e80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR aring
	{
		0x0000,0x0000,0x0000,0x0c00,
		0x1200,0x1200,0x0c00,0x3f00,
		0x6180,0x0180,0x3f80,0x6180,
		0x6180,0x6180,0x3e80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ae
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x3b00,
		0x4d80,0x0d80,0x0f00,0x3c00,
		0x6c00,0x6c80,0x3700,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR 0xccedilla
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x1f00,
		0x3180,0x6000,0x6000,0x6000,
		0x6000,0x3180,0x1f00,0x0c00,
		0x0400,0x1200,0x0c00,0x0000,
	},
	//STARTCHAR egrave
	{
		0x0000,0x0000,0x3000,0x1800,
		0x0c00,0x0000,0x0000,0x1e00,
		0x3300,0x6180,0x7f80,0x6000,
		0x6000,0x3180,0x1f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR eacute
	{
		0x0000,0x0000,0x0600,0x0c00,
		0x1800,0x0000,0x0000,0x1e00,
		0x3300,0x6180,0x7f80,0x6000,
		0x6000,0x3180,0x1f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ecircumflex
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x0000,0x0000,0x1e00,
		0x3300,0x6180,0x7f80,0x6000,
		0x6000,0x3180,0x1f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR edieresis
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x0000,0x1e00,
		0x3300,0x6180,0x7f80,0x6000,
		0x6000,0x3180,0x1f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR igrave
	{
		0x0000,0x0000,0x3000,0x1800,
		0x0c00,0x0000,0x0000,0x3c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR iacute
	{
		0x0000,0x0000,0x0600,0x0c00,
		0x1800,0x0000,0x0000,0x3c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR icircumflex
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x0000,0x0000,0x3c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR idieresis
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x0000,0x3c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR eth
	{
		0x0000,0x0000,0x4400,0x6c00,
		0x3800,0x3800,0x6c00,0x4600,
		0x1f00,0x3380,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ntilde
	{
		0x0000,0x0000,0x1900,0x3f00,
		0x2600,0x0000,0x0000,0x6e00,
		0x7300,0x6180,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ograve
	{
		0x0000,0x0000,0x3000,0x1800,
		0x0c00,0x0000,0x0000,0x1e00,
		0x3300,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR oacute
	{
		0x0000,0x0000,0x0600,0x0c00,
		0x1800,0x0000,0x0000,0x1e00,
		0x3300,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ocircumflex
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x0000,0x0000,0x1e00,
		0x3300,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR otilde
	{
		0x0000,0x0000,0x1900,0x3f00,
		0x2600,0x0000,0x0000,0x1e00,
		0x3300,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR odieresis
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x0000,0x1e00,
		0x3300,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR divide
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0c00,0x0c00,0x0000,0x0000,
		0x7f80,0x7f80,0x0000,0x0000,
		0x0c00,0x0c00,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR oslash
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0080,0x1f00,
		0x3300,0x6580,0x6580,0x6980,
		0x6980,0x3300,0x3e00,0x4000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ugrave
	{
		0x0000,0x0000,0x3000,0x1800,
		0x0c00,0x0000,0x0000,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1d80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR uacute
	{
		0x0000,0x0000,0x0600,0x0c00,
		0x1800,0x0000,0x0000,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1d80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ucircumflex
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x0000,0x0000,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1d80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR udieresis
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x0000,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1d80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR yacute
	{
		0x0000,0x0000,0x0600,0x0c00,
		0x1800,0x0000,0x0000,0x0000,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1d80,0x0180,
		0x6180,0x3300,0x1e00,0x0000,
	},
	//STARTCHAR thorn
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x3800,
		0x1e00,0x1b00,0x1b00,0x1e00,
		0x1800,0x1800,0x3800,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ydieresis
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x0000,0x0000,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1d80,0x0180,
		0x6180,0x3300,0x1e00,0x0000,
	}
};

#if 0
#ifndef Pixel32

typedef unsigned long Pixel32;

#endif

void DrawDigit(PVideoFrame &dst, int x, int y, int num)
{
	extern const unsigned short font[][20];

	if (num < 0) num = 0;

	const int pitchY = dst->GetPitch(PLANAR_Y);
	BYTE* dstpY = dst->GetWritePtr(PLANAR_Y) + x + y*pitchY;

	for (int ty = 0; ty < 20; ty++, dstpY+=pitchY) {
		BYTE *dpY = dstpY;
		unsigned int fontline = font[num][ty];

		for (int tx = 0; tx < 10; tx++, dpY++, fontline<<=1) {
			if (fontline & 0x8000) {
				*dpY = 230;
			} else {
				*dpY = (unsigned char) (((*dpY-16) * 7) >> 3) + 16;
			}
		}
	}

	const int UVw = dst->GetRowSize(PLANAR_U);
	if (UVw) {
		const int xSubS = dst->GetRowSize(PLANAR_Y) / UVw;
		const int ySubS = dst->GetHeight(PLANAR_Y) / dst->GetHeight(PLANAR_U);
		const int pitchUV = dst->GetPitch(PLANAR_V);

		unsigned int fontmask = 0;
		for (int i=0; i<xSubS; i++) {
			fontmask >>= 1;
			fontmask |= 0x8000;
		}

		BYTE* dstpU = dst->GetWritePtr(PLANAR_U) + x/xSubS + (y/ySubS)*pitchUV;
		BYTE* dstpV = dst->GetWritePtr(PLANAR_V) + x/xSubS + (y/ySubS)*pitchUV;

		for (int ty = 0; ty < 20; ty+=ySubS, dstpU+=pitchUV, dstpV+=pitchUV) {
			BYTE *dpU = dstpU;
			BYTE *dpV = dstpV;
			unsigned int fontline = 0;
			for (int m=0; m<ySubS; m++) fontline |= font[num][ty+m];

			for (int tx = 0; tx < 10; tx+=xSubS, dpU++, dpV++, fontline<<=xSubS) {
				if (fontline & fontmask) {
					*dpU = 128;
					*dpV = 128;
				} else {
					*dpU = (unsigned char) (((*dpU - 128) * 7) >> 3) + 128;
					*dpV = (unsigned char) (((*dpV - 128) * 7) >> 3) + 128;
				}
			}
		}
	}
}

void DrawString(PVideoFrame &dst, int x, int y, const char *s)
{
	for (int xx = 0; *s; ++s, ++xx) {
		DrawDigit(dst, x + xx*10, y, *s - ' ');
	}
}
#else
void DrawStringPlanar(PVideoFrame &dst, int x, int y, const char *s, int len=0)
{
	const int height = dst->GetHeight(PLANAR_Y);
	const int pitchY = dst->GetPitch(PLANAR_Y);

	// Default string length
	if (len == 0) len = strlen(s);

	// Chop text if exceed right margin
	if (len*10 > pitchY-x) len = (pitchY-x)/10;

	int si = 0, xs=0;
	// Chop 1st char if exceed left margin
	if (x < 0) {
		si = (-x)/10;
		xs = (-x)%10;
		x = 0;
	}

	int ys=0, ye=20;
	// Chop font if exceed bottom margin
	if (y > height-20)
		ye = height - y;

	// Chop font if exceed top margin
	if (y < 0) {
		ys = -y;
		y = 0;
	}

	BYTE* dstpY = dst->GetWritePtr(PLANAR_Y) + x + y*pitchY;

	for (int ty = ys; ty < ye; ty++, dstpY+=pitchY) {
		BYTE *dpY = dstpY;

		int num = (s[si] - ' ') & 0xFF;
		if (num >= 192) num = 0;
		unsigned int fontline = font[num][ty]<<xs;
		int _xs = xs;

		for (int i=si ; i < len; i++) {
			for (int tx = _xs; tx < 10; tx++, dpY++, fontline<<=1) {
				if (fontline & 0x8000) {
					dpY[0] = 230;
				} else {
//					dpY[0] = (unsigned char) (((dpY[0]-16) * 7) >> 3) + 16;
//					dpY[0] = (unsigned char) ((dpY[0] * 7) >> 3) - ((16 * 7) >> 3) + 16;
//					dpY[0] = (unsigned char) ((dpY[0] * 7) >> 3) - 14 + 16;
					dpY[0] = (unsigned char) ((dpY[0] * 7) >> 3) + 2;
				}
			}

			_xs = 0;
			num = (s[i+1] - ' ') & 0xFF;
			if (num >= 192) num = 0;
			fontline = font[num][ty];
		}
	}

	const int UVw = dst->GetRowSize(PLANAR_U);
	if (UVw) {
		// .SubS = 1, 2 or 4
		const int xSubS = dst->GetRowSize(PLANAR_Y) / UVw;
		const int ySubS = height / dst->GetHeight(PLANAR_U);
		const int pitchUV = dst->GetPitch(PLANAR_V);

		// fontmask = 0x8000, 0xC000 or 0xF000
		unsigned int fontmask = 0;
		for (int i=0; i<xSubS; i++) {
			fontmask >>= 1;
			fontmask |= 0x8000;
		}

		BYTE* dstpU = dst->GetWritePtr(PLANAR_U) + x/xSubS + (y/ySubS)*pitchUV;
		BYTE* dstpV = dst->GetWritePtr(PLANAR_V) + x/xSubS + (y/ySubS)*pitchUV;

		for (int ty = ys; ty < ye; ty+=ySubS, dstpU+=pitchUV, dstpV+=pitchUV) {
			BYTE *dpU = dstpU;
			BYTE *dpV = dstpV;

			int num = (s[si] - ' ') & 0xFF;
			if (num >= 192) num = 0;
			unsigned int fontline = 0;
			for (int m=0; m<ySubS; m++) fontline |= font[num][ty+m];
			fontline <<= xs;
			int _xs = xs;

			for (int i=si ; i < len; i++) {
				for (int tx = _xs; tx < 10; tx+=xSubS, dpU++, dpV++, fontline<<=xSubS) {
					if (fontline & fontmask) {
						dpU[0] = 128;
						dpV[0] = 128;
					} else {
//						dpU[0] = (unsigned char) (((dpU[0] - 128) * 7) >> 3) + 128;
//						dpU[0] = (unsigned char) ((dpU[0] * 7) >> 3) - ((128 * 7) >> 3) + 128;
//						dpU[0] = (unsigned char) ((dpU[0] * 7) >> 3) - 112 + 128;
						dpU[0] = (unsigned char) ((dpU[0] * 7) >> 3) + 16;
						dpV[0] = (unsigned char) ((dpV[0] * 7) >> 3) + 16;
					}
				}

				_xs = 0;
				num = (s[i+1] - ' ') & 0xFF;
				if (num >= 192) num = 0;
				fontline = 0;
				for (int m=0; m<ySubS; m++) fontline |= font[num][ty+m];
			}
		}
	}
}
#endif
#if 0
void DrawDigitYUY2(PVideoFrame &dst, int x, int y, int num)
{
	extern const unsigned short font[][20];

	if (num < 0) num = 0;

	const int pitch = dst->GetPitch();
	BYTE* dstp = dst->GetWritePtr() + x*2 + y*pitch;

	for (int ty = 0; ty < 20; ty++, dstp+=pitch) {
		BYTE* dp = dstp;
		unsigned int fontline = font[num][ty];

		for (int tx = 0; tx < 10; tx++, dp+=2, fontline<<=1) {
			if (fontline & 0x8000) {
				if (x+tx & 1) {
					dp[0] = 230;
					dp[-1]= 128;
					dp[1] = 128;
				} else {
					dp[0] = 230;
					dp[1] = 128;
					dp[3] = 128;
				}
			} else {
				if (x+tx & 1) {
					dp[0] = (unsigned char) (((dp[0]-16)  * 7) >> 3) + 16;
					dp[-1]= (unsigned char) (((dp[-1]-128)* 7) >> 3) + 128;
					dp[1] = (unsigned char) (((dp[1]-128) * 7) >> 3) + 128;
				} else {
					dp[0] = (unsigned char) (((dp[0]- 16) * 7) >> 3) + 16;
					dp[1] = (unsigned char) (((dp[1]-128) * 7) >> 3) + 128;
					dp[3] = (unsigned char) (((dp[3]-128) * 7) >> 3) + 128;
				}
			}
		}
	}
}

void DrawStringYUY2(PVideoFrame &dst, int x, int y, const char *s)
{
	for (int xx = 0; *s; ++s, ++xx) {
		DrawDigitYUY2(dst, x + xx*10, y, *s - ' ');
	}
}
#else
void DrawStringYUY2(PVideoFrame &dst, int x, int y, const char *s, int len=0)
{
	const int height = dst->GetHeight();
	const int pitch = dst->GetPitch();

	// Default string length
	if (len == 0) len = strlen(s);

	// Chop text if exceed right margin
	if (len*20 > pitch-x*2) len = (pitch-x*2)/20;

	int si = 0, xs=0;
	// Chop 1st char if exceed left margin
	if (x < 0) {
		si = (-x)/10;
		xs = (-x)%10;
		x = 0;
	}

	int ys=0, ye=20;
	// Chop font if exceed bottom margin
	if (y > height-20)
		ye = height - y;

	// Chop font if exceed top margin
	if (y < 0) {
		ys = -y;
		y = 0;
	}

	BYTE* dstp = dst->GetWritePtr() + x*2 + y*pitch;

	for (int ty = ys; ty < ye; ty++, dstp+=pitch) {
		BYTE* dp = dstp;

		int num = (s[si] - ' ') & 0xFF;
		if (num >= 192) num = 0;
		unsigned int fontline = font[num][ty]<<xs;
		int _xs = xs;

		for (int i=si ; i < len; i++) {
			for (int tx = _xs; tx < 10; tx++, dp+=2, fontline<<=1) {
				if (fontline & 0x8000) {
					if (int(dp) & 2) { // Assume dstp is dword aligned
						dp[0] = 230;
						dp[-1]= 128;
						dp[1] = 128;
					} else {
						dp[0] = 230;
						dp[1] = 128;
						dp[3] = 128;
					}
				} else {
					if (int(dp) & 2) {
						dp[0] = (unsigned char) ((dp[0] * 7) >> 3) + 2;
						dp[-1]= (unsigned char) ((dp[-1]* 7) >> 3) + 16;
						dp[1] = (unsigned char) ((dp[1] * 7) >> 3) + 16;
					} else {
						dp[0] = (unsigned char) ((dp[0] * 7) >> 3) + 2;
						dp[1] = (unsigned char) ((dp[1] * 7) >> 3) + 16;
						dp[3] = (unsigned char) ((dp[3] * 7) >> 3) + 16;
					}
				}
			}

			_xs = 0;
			num = (s[i+1] - ' ') & 0xFF;
			if (num >= 192) num = 0;
			fontline = font[num][ty];
		}
	}
}
#endif
#if 0
void DrawDigitRGB32(PVideoFrame &dst, int x, int y, int num)
{
	extern const unsigned short font[][20];

	if (num < 0) num = 0;

	const int height = dst->GetHeight();
	const int pitch = dst->GetPitch();
	BYTE* dstp = dst->GetWritePtr() + x*4 + (height-1 - y)*pitch;

	for (int ty = 0; ty < 20; ty++, dstp-=pitch) {
		BYTE* dp = dstp;
		unsigned int fontline = font[num][ty];

		for (int tx = 0; tx < 10; tx++, dp+=4, fontline<<=1) {
			if (fontline & 0x8000) {
				dp[0] = 250;
				dp[1] = 250;
				dp[2] = 250;
			} else {
				dp[0] = (unsigned char) ((dp[0] * 7) >> 3);
				dp[1] = (unsigned char) ((dp[1] * 7) >> 3);
				dp[2] = (unsigned char) ((dp[2] * 7) >> 3);
			}
		}
	}
}

void DrawStringRGB32(PVideoFrame &dst, int x, int y, const char *s)
{
	for (int xx = 0; *s; ++s, ++xx) {
		DrawDigitRGB32(dst, x + xx*10, y, *s - ' ');
	}
}
#else
void DrawStringRGB32(PVideoFrame &dst, int x, int y, const char *s, int len=0)
{
	const int height = dst->GetHeight();
	const int pitch = dst->GetPitch();

	// Default string length
	if (len == 0) len = strlen(s);

	// Chop text if exceed right margin
	if (len*40 > pitch-x*4) len = (pitch-x*4)/40;

	int si = 0, xs=0;
	// Chop 1st char if exceed left margin
	if (x < 0) {
		si = (-x)/10;
		xs = (-x)%10;
		x = 0;
	}

	int ys=0, ye=20;
	// Chop font if exceed bottom margin
	if (y > height-20)
		ye = height - y;

	// Chop font if exceed top margin
	if (y < 0) {
		ys = -y;
		y = 0;
	}

	BYTE* dstp = dst->GetWritePtr() + x*4 + (height-1 - y)*pitch;

	for (int ty = ys; ty < ye; ty++, dstp-=pitch) {
		BYTE* dp = dstp;

		int num = (s[si] - ' ') & 0xFF;
		if (num >= 192) num = 0;
		unsigned int fontline = font[num][ty]<<xs;
		int _xs = xs;

		for (int i=si ; i < len; i++) {
			for (int tx = _xs; tx < 10; tx++, dp+=4, fontline<<=1) {
				if (fontline & 0x8000) {
					dp[0] = 250;
					dp[1] = 250;
					dp[2] = 250;
				} else {
					dp[0] = (unsigned char) ((dp[0] * 7) >> 3);
					dp[1] = (unsigned char) ((dp[1] * 7) >> 3);
					dp[2] = (unsigned char) ((dp[2] * 7) >> 3);
				}
			}

			_xs = 0;
			num = (s[i+1] - ' ') & 0xFF;
			if (num >= 192) num = 0;
			fontline = font[num][ty];
		}
	}
}
#endif
#if 0
void DrawDigitRGB24(PVideoFrame &dst, int x, int y, int num)
{
	extern const unsigned short font[][20];

	if (num < 0) num = 0;

	const int height = dst->GetHeight();
	const int pitch = dst->GetPitch();
	BYTE* dstp = dst->GetWritePtr() + x*3 + (height-1 - y)*pitch;

	for (int ty = 0; ty < 20; ty++, dstp-=pitch) {
		BYTE* dp = dstp;
		unsigned int fontline = font[num][ty];

		for (int tx = 0; tx < 10; tx++, dp+=3, fontline<<=1) {
			if (fontline & 0x8000) {
				dp[0] = 250;
				dp[1] = 250;
				dp[2] = 250;
			} else {
				dp[0] = (unsigned char) ((dp[0] * 7) >> 3);
				dp[1] = (unsigned char) ((dp[1] * 7) >> 3);
				dp[2] = (unsigned char) ((dp[2] * 7) >> 3);
			}
		}
	}
}

void DrawStringRGB24(PVideoFrame &dst, int x, int y, const char *s)
{
	for (int xx = 0; *s; ++s, ++xx) {
		DrawDigitRGB24(dst, x + xx*10, y, *s - ' ');
	}
}
#else
void DrawStringRGB24(PVideoFrame &dst, int x, int y, const char *s, int len=0)
{
	const int height = dst->GetHeight();
	const int pitch = dst->GetPitch();

	// Default string length
	if (len == 0) len = strlen(s);

	// Chop text if exceed right margin
	if (len*30 > pitch-x*3) len = (pitch-x*3)/30;

	int si = 0, xs=0;
	// Chop 1st char if exceed left margin
	if (x < 0) {
		si = (-x)/10;
		xs = (-x)%10;
		x = 0;
	}

	int ys=0, ye=20;
	// Chop font if exceed bottom margin
	if (y > height-20)
		ye = height - y;

	// Chop font if exceed top margin
	if (y < 0) {
		ys = -y;
		y = 0;
	}

	BYTE* dstp = dst->GetWritePtr() + x*3 + (height-1 - y)*pitch;

	for (int ty = ys; ty < ye; ty++, dstp-=pitch) {
		BYTE* dp = dstp;

		int num = (s[si] - ' ') & 0xFF;
		if (num >= 192) num = 0;
		unsigned int fontline = font[num][ty]<<xs;
		int _xs = xs;

		for (int i=si ; i < len; i++) {
			for (int tx = _xs; tx < 10; tx++, dp+=3, fontline<<=1) {
				if (fontline & 0x8000) {
					dp[0] = 250;
					dp[1] = 250;
					dp[2] = 250;
				} else {
					dp[0] = (unsigned char) ((dp[0] * 7) >> 3);
					dp[1] = (unsigned char) ((dp[1] * 7) >> 3);
					dp[2] = (unsigned char) ((dp[2] * 7) >> 3);
				}
			}

			_xs = 0;
			num = (s[i+1] - ' ') & 0xFF;
			if (num >= 192) num = 0;
			fontline = font[num][ty];
		}
	}
}
#endif
